chromosome
?flush.console
large_population_GWAS_file <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/large_population_GWAS_two_chr'
small_population_GWAS_file <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/small_population_GWAS_two_chr'
library(data.table)
large_population_GWAS <-  fread(large_population_GWAS_file, header = T, data.table = F)
large_population_GWAS
large_population_size <- as.numeric(large_population_GWAS$OBS_CT[1])
pheno_gene_correlation <- data.frame(CHR = large_population_GWAS$`#CHROM`,
ID = large_population_GWAS$ID)
pheno_gene_correlation[,large_population_type] <- p2cor(p = large_population_GWAS$P,
n = large_population_size,
sign=log(large_population_GWAS$OR))
small_population_GWAS <-  fread(small_population_GWAS_file, header = T, data.table = F)
small_population_size <- as.numeric(small_population_GWAS$OBS_CT[1])
small_population_GWAS
small_population_size <- as.numeric(small_population_GWAS$OBS_CT[1])
pheno_gene_correlation[,small_population_type] <- p2cor(p = small_population_GWAS$P,
n = small_population_size,
sign=log(small_population_GWAS$OR))
large_population_GWAS_file <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/large_population_GWAS_two_chr'
small_population_GWAS_file <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/small_population_GWAS_two_chr'
large_population_reference_prefix <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/CEU-chr'
small_population_reference_prefix <- '/Users/tianyuzhang/Documents/GitHub/JointLassosum/JLS_basic/data/YRI-chr'
###OTHER METADATA
large_population_type <- 'CEU'
small_population_type <- 'YRI'
###HYPERPARAMETER CANDIDATES
JLS_population_weight <- c(0.3, 0.5, 0.8)
JLS_l1_penalty <- exp(seq(log(0.007), log(0.05), length.out=5))
JLS_shrinkage <- c(0.75)
chromosome <- 1:22
###GIVEN THE ABOVE INFORMATION, FIT THE MODEL FOR ONE TIME
JLS_population_weight_one <- JLS_population_weight[1]
####LOAD THE LD BLOCK BOUNDARY INFORMATION
map_population_type_to_Berisa_label <- function(population_type){
if(population_type %in% c("CEU", "EUR")){
Berisa_label <- "EUR"
}else if(population_type %in% c("YRI", "AFR")){
Berisa_label <- "AFR"
}else{
print(paste0('I cannot find a Berisa label for ', population_type))
}
return(Berisa_label)
}
LD_block_boundary <- list()
large_population_LD_file <- paste0("data/Berisa.",
map_population_type_to_Berisa_label(large_population_type), ".hg38.bed")
LD_block_boundary[[large_population_type]] <- read.table2(system.file(large_population_LD_file,
package="lassosum"),
header=T)
source("Lassosum_function/parseselect.R")
source("Lassosum_function/parseblocks.R")
source("Lassosum_function/ncol.bfile.R")
source("Lassosum_function/nrow.bfile.R")
source("Lassosum_function/read.table2.R")
source("Lassosum_function/selectregion.R")
source("Lassosum_function/parse.pheno.covar.R")
source("Lassosum_function/myelnet.R")
source("Lassosum_function/mylassosum.R")
source("Lassosum_function/splitgenome.R")
source("Lassosum_function/validation.R")
source("Lassosum_function/merge.mylassosum.R")
LD_block_boundary[[large_population_type]] <- read.table2(system.file(large_population_LD_file,
package="lassosum"),
header=T)
large_population_LD_file
library(lassosum)
install.packages(lassosum)
install.packages('lassosum')
?mclapply
lapply
